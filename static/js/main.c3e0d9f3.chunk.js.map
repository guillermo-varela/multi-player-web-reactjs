{"version":3,"sources":["model/routes.ts","hooks/useTypedSelector.ts","services/localeService.ts","sites/root/RootRouter.tsx","App.tsx","reducers/authenticationReducer.ts","reducers/localeReducer.ts","reducers/rootReducer.ts","serviceWorker.ts","index.tsx","model/ActionType.ts"],"names":["root","all","nature","space","about","images","videos","signIn","useTypedSelector","useSelector","getLocaleValue","locale","startsWith","getLocale","localStorage","getItem","navigator","language","saveLocale","value","setItem","RootHome","lazy","NatureApp","SpaceApp","RootRouter","basename","process","fallback","id","exact","path","routes","component","to","messages","en","es","App","state","initialState","isPendingSignIn","isErrorSignIn","isBadCredentials","isPendingSignOut","isErrorSignOut","isPendingCheckAuthentication","authenticationReducer","action","type","ActionType","SIGN_IN_PENDING","SIGN_IN_SUCCESS","user","payload","SIGN_IN_ERROR","SIGN_OUT_PENDING","SIGN_OUT_ERROR","SIGN_OUT_SUCCESS","CHECK_AUTHENTICATION_PENDING","initialLocale","localeReducer","CHANGE_LOCALE","rootReducer","combineReducers","authentication","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3e0d9f3.chunk.js","sourcesContent":["export const root = '/';\nexport const all = '*';\nexport const nature = '/nature';\nexport const space = '/space';\nexport const about = '/about';\nexport const images = '/images';\nexport const videos = '/videos';\nexport const signIn = '/signIn';\n","import { useSelector, TypedUseSelectorHook } from 'react-redux'\nimport RootState from '../model/RootState';\n\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\nexport default useTypedSelector;\n","import Locale from '../model/Locale';\n\nconst localeKey = 'locale';\n\nconst getLocaleValue = (locale: string): Locale => locale.startsWith('es') ? 'es' : 'en';\n\nexport const getLocale = (): Locale =>\n  getLocaleValue(localStorage.getItem(localeKey) || navigator.language);\n\nexport const saveLocale = (locale: string): Locale => {\n  const value = getLocaleValue(locale);\n  localStorage.setItem(localeKey, value);\n  return value;\n}\n","import React, { lazy, Suspense } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport * as routes from '../../model/routes';\n\nconst RootHome = lazy(() => import('./RootHome/RootHome'));\nconst NatureApp = lazy(() => import('../nature/NatureApp'));\nconst SpaceApp = lazy(() => import('../space/SpaceApp'));\n\nconst RootRouter: React.FC = () => {\n  return (\n    <BrowserRouter basename={process.env.REACT_APP_BASENAME}>\n      <Suspense fallback={<FormattedMessage id='root.loading' />}>\n        <Switch>\n          <Route exact path={routes.root} component={RootHome} />\n          <Route path={routes.nature} component={NatureApp} />\n          <Route path={routes.space} component={SpaceApp} />\n          <Route path={routes.all} component={() => <Redirect to={routes.root} />} />\n        </Switch>\n      </Suspense>\n    </BrowserRouter>\n  );\n}\n\nexport default RootRouter;\n","import React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport en from './translations/en.json';\nimport es from './translations/es.json';\nimport useTypedSelector from './hooks/useTypedSelector';\nimport RootRouter from './sites/root/RootRouter';\n\nimport './App.scss';\n\nconst messages = { en, es };\n\nconst App: React.FC = () => {\n  const locale = useTypedSelector(state => state.locale);\n\n  return (\n    <IntlProvider locale={locale} messages={messages[locale]}>\n      <RootRouter />\n    </IntlProvider>\n  );\n}\n\nexport default App;\n","import Action from '../model/Action';\nimport ActionType from '../model/ActionType';\nimport User from '../model/User';\n\ntype State = {\n  isPendingSignIn: boolean,\n  isErrorSignIn: boolean,\n  isBadCredentials: boolean,\n  isPendingSignOut: boolean,\n  isErrorSignOut: boolean,\n  isPendingCheckAuthentication: boolean,\n  user?: User\n}\n\nconst initialState: State = {\n  isPendingSignIn: false,\n  isErrorSignIn: false,\n  isBadCredentials: false,\n  isPendingSignOut: false,\n  isErrorSignOut: false,\n  isPendingCheckAuthentication: false\n};\n\nconst authenticationReducer = (state: State = initialState, action: Action): State => {\n  switch (action.type) {\n    case ActionType.SIGN_IN_PENDING:\n      return { ...initialState, isPendingSignIn: true };\n    case ActionType.SIGN_IN_SUCCESS:\n      return { ...initialState, user: action.payload };\n    case ActionType.SIGN_IN_ERROR:\n      return { ...initialState, isErrorSignIn: true, isBadCredentials: action.payload === 401 };\n    case ActionType.SIGN_OUT_PENDING:\n      return { ...state, isPendingSignOut: true, isErrorSignOut: false };\n    case ActionType.SIGN_OUT_ERROR:\n      return { ...state, isPendingSignOut: false, isErrorSignOut: true };\n    case ActionType.SIGN_OUT_SUCCESS:\n      return initialState;\n    case ActionType.CHECK_AUTHENTICATION_PENDING:\n      return { ...state, isPendingCheckAuthentication: true };\n    default:\n      return state;\n  }\n};\n\nexport default authenticationReducer;\n","import Action from '../model/Action';\nimport ActionType from '../model/ActionType';\nimport Locale from '../model/Locale';\nimport { getLocale } from '../services/localeService';\n\nconst initialLocale = getLocale();\n\nconst localeReducer = (locale: Locale = initialLocale, action: Action): Locale => {\n  switch (action.type) {\n    case ActionType.CHANGE_LOCALE:\n      return action.payload;\n    default:\n      return locale;\n  }\n};\n\nexport default localeReducer;\n","import { combineReducers } from 'redux';\nimport authenticationReducer from './authenticationReducer';\nimport localeReducer from './localeReducer';\n\nconst rootReducer = combineReducers({\n  authentication: authenticationReducer,\n  locale: localeReducer\n});\n\nexport default rootReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './App';\nimport rootReducer from './reducers/rootReducer';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store} >\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","enum ActionType {\n  SIGN_IN_PENDING,\n  SIGN_IN_SUCCESS,\n  SIGN_IN_ERROR,\n  SIGN_OUT_PENDING,\n  SIGN_OUT_SUCCESS,\n  SIGN_OUT_ERROR,\n  CHECK_AUTHENTICATION_PENDING,\n  CHANGE_LOCALE\n}\n\nexport default ActionType;\n"],"sourceRoot":""}